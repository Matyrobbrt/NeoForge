--- a/net/minecraft/core/MappedRegistry.java
+++ b/net/minecraft/core/MappedRegistry.java
@@ -51,6 +_,7 @@
    @Nullable
    private List<Holder.Reference<T>> f_211051_;
    private int f_122678_;
+   private final net.minecraftforge.registries.attachment.AttachmentHolder<T> attachments;
    private final HolderLookup.RegistryLookup<T> f_256971_ = new HolderLookup.RegistryLookup<T>() {
       public ResourceKey<? extends Registry<? extends T>> m_254879_() {
          return MappedRegistry.this.f_256817_;
@@ -75,6 +_,26 @@
       public Stream<HolderSet.Named<T>> m_214063_() {
          return MappedRegistry.this.m_203612_().map(Pair::getSecond);
       }
+
+      @Override
+      public <A> @org.jetbrains.annotations.Nullable A getAttachment(net.minecraftforge.registries.attachment.AttachmentTypeKey<A> key, Holder.Reference<T> holder) {
+         return getAttachmentMap(key).get(holder.m_205785_());
+      }
+      @Override
+      public <A> @org.jetbrains.annotations.Nullable A getTagAttachment(net.minecraftforge.registries.attachment.AttachmentTypeKey<A> key, HolderSet.Named<T> tag) {
+         return getAttachmentMap(key).get(tag.m_205839_());
+      }
+      @Override
+      public Map<net.minecraftforge.registries.attachment.AttachmentTypeKey<?>, net.minecraftforge.registries.attachment.AttachmentType<?, T>> getAttachmentTypes() {
+         return getAttachmentHolder().getAttachmentTypes();
+      }
+      private <A> Map<Object, A> getAttachmentMap(net.minecraftforge.registries.attachment.AttachmentTypeKey<A> key) {
+         final var map = attachments.getAttachments().get(key);
+         if (map == null) {
+            throw new IllegalArgumentException("Registry " + MappedRegistry.this.f_256817_ + " does not support attachments of type " + key.getId());
+         }
+         return (Map<Object, A>)map;
+      }
    };
 
    public MappedRegistry(ResourceKey<? extends Registry<T>> p_249899_, Lifecycle p_252249_) {
@@ -90,6 +_,7 @@
       if (p_251014_) {
          this.f_244282_ = new IdentityHashMap<>();
       }
+      this.attachments = new net.minecraftforge.registries.attachment.AttachmentHolder<>(f_256817_);
 
    }
 
@@ -121,7 +_,16 @@
       }
    }
 
+   private static final Set<ResourceLocation> KNOWN = new java.util.LinkedHashSet<>();
+   public static Set<ResourceLocation> getKnownRegistries() {
+      return java.util.Collections.unmodifiableSet(KNOWN);
+   }
+   protected final void markKnown() {
+      KNOWN.add(m_123023_().m_135782_());
+   }
+
    public Holder.Reference<T> m_203704_(int p_256563_, ResourceKey<T> p_256594_, T p_256374_, Lifecycle p_256469_) {
+      markKnown();
       this.m_205921_(p_256594_);
       Validate.notNull(p_256594_);
       Validate.notNull(p_256374_);
@@ -145,6 +_,8 @@
          reference = this.f_205842_.computeIfAbsent(p_256594_, (p_258168_) -> {
             return Holder.Reference.m_254896_(this.m_255331_(), p_258168_);
          });
+         // Forge: Bind the value immediately so it can be queried while the registry is not frozen
+         reference.m_247654_(p_256374_);
       }
 
       this.f_205842_.put(p_256594_, reference);
@@ -300,14 +_,17 @@
       return this.f_205842_.containsKey(p_175392_);
    }
 
+   /** @deprecated Forge: For internal use only. Use the Register events when registering values. */
+   @Deprecated
+   public void unfreeze() {
+      this.f_205845_ = false;
+   }
+
    public Registry<T> m_203521_() {
       if (this.f_205845_) {
          return this;
       } else {
          this.f_205845_ = true;
-         this.f_205843_.forEach((p_247989_, p_247990_) -> {
-            p_247990_.m_247654_(p_247989_);
-         });
          List<ResourceLocation> list = this.f_205842_.entrySet().stream().filter((p_211055_) -> {
             return !p_211055_.getValue().m_203633_();
          }).map((p_211794_) -> {
@@ -321,12 +_,18 @@
                   throw new IllegalStateException("Some intrusive holders were not registered: " + this.f_244282_.values());
                }
 
-               this.f_244282_ = null;
+               // Forge: We freeze/unfreeze vanilla registries more than once, so we need to keep the unregistered intrusive holders map around.
+               // this.unregisteredIntrusiveHolders = null;
             }
 
             return this;
          }
       }
+   }
+
+   @Override
+   public net.minecraftforge.registries.attachment.AttachmentHolder<T> getAttachmentHolder() {
+      return attachments;
    }
 
    public Holder.Reference<T> m_203693_(T p_205915_) {
