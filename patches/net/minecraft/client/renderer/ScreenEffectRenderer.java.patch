--- a/net/minecraft/client/renderer/ScreenEffectRenderer.java
+++ b/net/minecraft/client/renderer/ScreenEffectRenderer.java
@@ -30,18 +_,22 @@
     public static void renderScreenEffect(Minecraft minecraft, PoseStack poseStack) {
         Player player = minecraft.player;
         if (!player.noPhysics) {
-            BlockState blockstate = getViewBlockingState(player);
-            if (blockstate != null) {
-                renderTex(minecraft.getBlockRenderer().getBlockModelShaper().getParticleIcon(blockstate), poseStack);
+            org.apache.commons.lang3.tuple.Pair<BlockState, BlockPos> overlay = getOverlayBlock(player);
+            if (overlay != null) {
+                if (!net.neoforged.neoforge.client.ClientHooks.renderBlockOverlay(player, poseStack, net.neoforged.neoforge.client.event.RenderBlockScreenEffectEvent.OverlayType.BLOCK, overlay.getLeft(), overlay.getRight()))
+                    renderTex(minecraft.getBlockRenderer().getBlockModelShaper().getTexture(overlay.getLeft(), minecraft.level, overlay.getRight()), poseStack);
             }
         }
 
         if (!minecraft.player.isSpectator()) {
             if (minecraft.player.isEyeInFluid(FluidTags.WATER)) {
+                if (!net.neoforged.neoforge.client.ClientHooks.renderWaterOverlay(player, poseStack))
                 renderWater(minecraft, poseStack);
             }
+            else if (!player.getEyeInFluidType().isAir()) net.neoforged.neoforge.client.extensions.common.IClientFluidTypeExtensions.of(player.getEyeInFluidType()).renderOverlay(minecraft, poseStack);
 
             if (minecraft.player.isOnFire()) {
+                if (!net.neoforged.neoforge.client.ClientHooks.renderFireOverlay(player, poseStack))
                 renderFire(minecraft, poseStack);
             }
         }
@@ -49,16 +_,21 @@
 
     @Nullable
     private static BlockState getViewBlockingState(Player player) {
+        return getOverlayBlock(player).getLeft();
+    }
+
+    @Nullable
+    private static org.apache.commons.lang3.tuple.Pair<BlockState, BlockPos> getOverlayBlock(Player p_110717_) {
         BlockPos.MutableBlockPos blockpos$mutableblockpos = new BlockPos.MutableBlockPos();
 
         for (int i = 0; i < 8; i++) {
-            double d0 = player.getX() + (double)(((float)((i >> 0) % 2) - 0.5F) * player.getBbWidth() * 0.8F);
-            double d1 = player.getEyeY() + (double)(((float)((i >> 1) % 2) - 0.5F) * 0.1F * player.getScale());
-            double d2 = player.getZ() + (double)(((float)((i >> 2) % 2) - 0.5F) * player.getBbWidth() * 0.8F);
+            double d0 = p_110717_.getX() + (double)(((float)((i >> 0) % 2) - 0.5F) * p_110717_.getBbWidth() * 0.8F);
+            double d1 = p_110717_.getEyeY() + (double)(((float)((i >> 1) % 2) - 0.5F) * 0.1F * p_110717_.getScale());
+            double d2 = p_110717_.getZ() + (double)(((float)((i >> 2) % 2) - 0.5F) * p_110717_.getBbWidth() * 0.8F);
             blockpos$mutableblockpos.set(d0, d1, d2);
-            BlockState blockstate = player.level().getBlockState(blockpos$mutableblockpos);
-            if (blockstate.getRenderShape() != RenderShape.INVISIBLE && blockstate.isViewBlocking(player.level(), blockpos$mutableblockpos)) {
-                return blockstate;
+            BlockState blockstate = p_110717_.level().getBlockState(blockpos$mutableblockpos);
+            if (blockstate.getRenderShape() != RenderShape.INVISIBLE && blockstate.isViewBlocking(p_110717_.level(), blockpos$mutableblockpos)) {
+                return org.apache.commons.lang3.tuple.Pair.of(blockstate, blockpos$mutableblockpos.immutable());
             }
         }
 
@@ -88,10 +_,14 @@
     }
 
     private static void renderWater(Minecraft minecraft, PoseStack poseStack) {
+        renderFluid(minecraft, poseStack, UNDERWATER_LOCATION);
+    }
+
+    public static void renderFluid(Minecraft p_110726_, PoseStack p_110727_, ResourceLocation texture) {
         RenderSystem.setShader(GameRenderer::getPositionTexShader);
-        RenderSystem.setShaderTexture(0, UNDERWATER_LOCATION);
-        BlockPos blockpos = BlockPos.containing(minecraft.player.getX(), minecraft.player.getEyeY(), minecraft.player.getZ());
-        float f = LightTexture.getBrightness(minecraft.player.level().dimensionType(), minecraft.player.level().getMaxLocalRawBrightness(blockpos));
+        RenderSystem.setShaderTexture(0, texture);
+        BlockPos blockpos = BlockPos.containing(p_110726_.player.getX(), p_110726_.player.getEyeY(), p_110726_.player.getZ());
+        float f = LightTexture.getBrightness(p_110726_.player.level().dimensionType(), p_110726_.player.level().getMaxLocalRawBrightness(blockpos));
         RenderSystem.enableBlend();
         RenderSystem.setShaderColor(f, f, f, 0.1F);
         float f1 = 4.0F;
@@ -100,9 +_,9 @@
         float f4 = -1.0F;
         float f5 = 1.0F;
         float f6 = -0.5F;
-        float f7 = -minecraft.player.getYRot() / 64.0F;
-        float f8 = minecraft.player.getXRot() / 64.0F;
-        Matrix4f matrix4f = poseStack.last().pose();
+        float f7 = -p_110726_.player.getYRot() / 64.0F;
+        float f8 = p_110726_.player.getXRot() / 64.0F;
+        Matrix4f matrix4f = p_110727_.last().pose();
         BufferBuilder bufferbuilder = Tesselator.getInstance().begin(VertexFormat.Mode.QUADS, DefaultVertexFormat.POSITION_TEX);
         bufferbuilder.addVertex(matrix4f, -1.0F, -1.0F, -0.5F).setUv(4.0F + f7, 4.0F + f8);
         bufferbuilder.addVertex(matrix4f, 1.0F, -1.0F, -0.5F).setUv(0.0F + f7, 4.0F + f8);
