--- a/net/minecraft/client/renderer/block/model/BlockModel.java
+++ b/net/minecraft/client/renderer/block/model/BlockModel.java
@@ -77,9 +_,10 @@
     public BlockModel parent;
     @Nullable
     protected ResourceLocation parentLocation;
+    public final net.neoforged.neoforge.client.model.geometry.BlockGeometryBakingContext customData = new net.neoforged.neoforge.client.model.geometry.BlockGeometryBakingContext(this);
 
     public static BlockModel fromStream(Reader reader) {
-        return GsonHelper.fromJson(GSON, reader, BlockModel.class);
+        return GsonHelper.fromJson(net.neoforged.neoforge.client.model.ExtendedBlockModelDeserializer.INSTANCE, reader, BlockModel.class);
     }
 
     public static BlockModel fromString(String jsonString) {
@@ -104,10 +_,15 @@
         this.overrides = overrides;
     }
 
+    @Deprecated
     public List<BlockElement> getElements() {
+        if (customData.hasCustomGeometry()) return java.util.Collections.emptyList();
         return this.elements.isEmpty() && this.parent != null ? this.parent.getElements() : this.elements;
     }
 
+    @Nullable
+    public ResourceLocation getParentLocation() { return parentLocation; }
+
     public boolean hasAmbientOcclusion() {
         if (this.hasAmbientOcclusion != null) {
             return this.hasAmbientOcclusion;
@@ -136,6 +_,10 @@
         return this.overrides.isEmpty() ? ItemOverrides.EMPTY : new ItemOverrides(baker, model, this.overrides);
     }
 
+    public ItemOverrides getOverrides(ModelBaker p_250138_, BlockModel p_251800_, Function<Material, TextureAtlasSprite> spriteGetter) {
+        return this.overrides.isEmpty() ? ItemOverrides.EMPTY : new ItemOverrides(p_250138_, p_251800_, this.overrides, spriteGetter);
+    }
+
     @Override
     public Collection<ResourceLocation> getDependencies() {
         Set<ResourceLocation> set = Sets.newHashSet();
@@ -184,6 +_,10 @@
             blockmodel.parent = (BlockModel)unbakedmodel;
         }
 
+        if (customData.hasCustomGeometry()) {
+            customData.getCustomGeometry().resolveParents(resolver, customData);
+        }
+
         this.overrides.forEach(p_247932_ -> {
             UnbakedModel unbakedmodel1 = resolver.apply(p_247932_.getModel());
             if (!Objects.equals(unbakedmodel1, this)) {
@@ -198,25 +_,31 @@
     }
 
     public BakedModel bake(
-        ModelBaker baker, BlockModel model, Function<Material, TextureAtlasSprite> spriteGetter, ModelState state, boolean guiLight3d
-    ) {
-        TextureAtlasSprite textureatlassprite = spriteGetter.apply(this.getMaterial("particle"));
+            ModelBaker baker, BlockModel model, Function<Material, TextureAtlasSprite> spriteGetter, ModelState state, boolean guiLight3d
+    ) {
+        return net.neoforged.neoforge.client.model.geometry.UnbakedGeometryHelper.bake(this, baker, model, spriteGetter, state, guiLight3d);
+    }
+
+    public BakedModel bakeVanilla(
+        ModelBaker p_249720_, BlockModel p_111451_, Function<Material, TextureAtlasSprite> p_111452_, ModelState p_111453_, boolean p_111455_
+    ) {
+        TextureAtlasSprite textureatlassprite = p_111452_.apply(this.getMaterial("particle"));
         if (this.getRootModel() == ModelBakery.BLOCK_ENTITY_MARKER) {
-            return new BuiltInModel(this.getTransforms(), this.getItemOverrides(baker, model), textureatlassprite, this.getGuiLight().lightLikeBlock());
+            return new BuiltInModel(this.getTransforms(), this.getItemOverrides(p_249720_, p_111451_), textureatlassprite, this.getGuiLight().lightLikeBlock());
         } else {
-            SimpleBakedModel.Builder simplebakedmodel$builder = new SimpleBakedModel.Builder(this, this.getItemOverrides(baker, model), guiLight3d)
+            SimpleBakedModel.Builder simplebakedmodel$builder = new SimpleBakedModel.Builder(this, this.getItemOverrides(p_249720_, p_111451_), p_111455_)
                 .particle(textureatlassprite);
 
             for (BlockElement blockelement : this.getElements()) {
                 for (Direction direction : blockelement.faces.keySet()) {
                     BlockElementFace blockelementface = blockelement.faces.get(direction);
-                    TextureAtlasSprite textureatlassprite1 = spriteGetter.apply(this.getMaterial(blockelementface.texture()));
+                    TextureAtlasSprite textureatlassprite1 = p_111452_.apply(this.getMaterial(blockelementface.texture()));
                     if (blockelementface.cullForDirection() == null) {
-                        simplebakedmodel$builder.addUnculledFace(bakeFace(blockelement, blockelementface, textureatlassprite1, direction, state));
+                        simplebakedmodel$builder.addUnculledFace(bakeFace(blockelement, blockelementface, textureatlassprite1, direction, p_111453_));
                     } else {
                         simplebakedmodel$builder.addCulledFace(
-                            Direction.rotate(state.getRotation().getMatrix(), blockelementface.cullForDirection()),
-                            bakeFace(blockelement, blockelementface, textureatlassprite1, direction, state)
+                            Direction.rotate(p_111453_.getRotation().getMatrix(), blockelementface.cullForDirection()),
+                            bakeFace(blockelement, blockelementface, textureatlassprite1, direction, p_111453_)
                         );
                     }
                 }
@@ -288,7 +_,18 @@
         ItemTransform itemtransform5 = this.getTransform(ItemDisplayContext.GUI);
         ItemTransform itemtransform6 = this.getTransform(ItemDisplayContext.GROUND);
         ItemTransform itemtransform7 = this.getTransform(ItemDisplayContext.FIXED);
-        return new ItemTransforms(itemtransform, itemtransform1, itemtransform2, itemtransform3, itemtransform4, itemtransform5, itemtransform6, itemtransform7);
+
+        var builder = com.google.common.collect.ImmutableMap.<ItemDisplayContext, ItemTransform>builder();
+        for(ItemDisplayContext type : ItemDisplayContext.values()) {
+            if (type.isModded()) {
+                var transform = this.getTransform(type);
+                if (transform != ItemTransform.NO_TRANSFORM) {
+                    builder.put(type, transform);
+                }
+            }
+        }
+
+        return new ItemTransforms(itemtransform, itemtransform1, itemtransform2, itemtransform3, itemtransform4, itemtransform5, itemtransform6, itemtransform7, builder.build());
     }
 
     private ItemTransform getTransform(ItemDisplayContext displayContext) {
@@ -407,6 +_,8 @@
         public boolean lightLikeBlock() {
             return this == SIDE;
         }
+
+        public String getSerializedName() { return name; }
     }
 
     @OnlyIn(Dist.CLIENT)
