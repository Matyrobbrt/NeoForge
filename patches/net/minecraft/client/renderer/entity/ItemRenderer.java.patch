--- a/net/minecraft/client/renderer/entity/ItemRenderer.java
+++ b/net/minecraft/client/renderer/entity/ItemRenderer.java
@@ -70,7 +_,7 @@
     public ItemRenderer(Minecraft minecraft, TextureManager textureManager, ModelManager modelManager, ItemColors itemColors, BlockEntityWithoutLevelRenderer blockEntityRenderer) {
         this.minecraft = minecraft;
         this.textureManager = textureManager;
-        this.itemModelShaper = new ItemModelShaper(modelManager);
+        this.itemModelShaper = new net.neoforged.neoforge.client.model.RegistryAwareItemModelShaper(modelManager);
         this.blockEntityRenderer = blockEntityRenderer;
 
         for (Item item : BuiltInRegistries.ITEM) {
@@ -107,22 +_,22 @@
         MultiBufferSource bufferSource,
         int combinedLight,
         int combinedOverlay,
-        BakedModel model
+        BakedModel p_model
     ) {
         if (!itemStack.isEmpty()) {
             poseStack.pushPose();
             boolean flag = displayContext == ItemDisplayContext.GUI || displayContext == ItemDisplayContext.GROUND || displayContext == ItemDisplayContext.FIXED;
             if (flag) {
                 if (itemStack.is(Items.TRIDENT)) {
-                    model = this.itemModelShaper.getModelManager().getModel(TRIDENT_MODEL);
+                    p_model = this.itemModelShaper.getModelManager().getModel(TRIDENT_MODEL);
                 } else if (itemStack.is(Items.SPYGLASS)) {
-                    model = this.itemModelShaper.getModelManager().getModel(SPYGLASS_MODEL);
+                    p_model = this.itemModelShaper.getModelManager().getModel(SPYGLASS_MODEL);
                 }
             }
 
-            model.getTransforms().getTransform(displayContext).apply(leftHand, poseStack);
+            p_model = net.neoforged.neoforge.client.ClientHooks.handleCameraTransforms(poseStack, p_model, displayContext, leftHand);
             poseStack.translate(-0.5F, -0.5F, -0.5F);
-            if (!model.isCustomRenderer() && (!itemStack.is(Items.TRIDENT) || flag)) {
+            if (!p_model.isCustomRenderer() && (!itemStack.is(Items.TRIDENT) || flag)) {
                 boolean flag1;
                 if (displayContext != ItemDisplayContext.GUI && !displayContext.firstPerson() && itemStack.getItem() instanceof BlockItem blockitem) {
                     Block block = blockitem.getBlock();
@@ -131,7 +_,8 @@
                     flag1 = true;
                 }
 
-                RenderType rendertype = ItemBlockRenderTypes.getRenderType(itemStack, flag1);
+                for (var model : p_model.getRenderPasses(itemStack, flag1)) {
+                for (var rendertype : model.getRenderTypes(itemStack, flag1)) {
                 VertexConsumer vertexconsumer;
                 if (hasAnimatedTexture(itemStack) && itemStack.hasFoil()) {
                     PoseStack.Pose posestack$pose = poseStack.last().copy();
@@ -149,8 +_,10 @@
                 }
 
                 this.renderModelLists(model, itemStack, combinedLight, combinedOverlay, poseStack, vertexconsumer);
+                }
+                }
             } else {
-                this.blockEntityRenderer.renderByItem(itemStack, displayContext, poseStack, bufferSource, combinedLight, combinedOverlay);
+                net.neoforged.neoforge.client.extensions.common.IClientItemExtensions.of(itemStack).getCustomRenderer().renderByItem(itemStack, displayContext, poseStack, bufferSource, combinedLight, combinedOverlay);
             }
 
             poseStack.popPose();
@@ -203,7 +_,7 @@
             float f1 = (float)FastColor.ARGB32.red(i) / 255.0F;
             float f2 = (float)FastColor.ARGB32.green(i) / 255.0F;
             float f3 = (float)FastColor.ARGB32.blue(i) / 255.0F;
-            buffer.putBulkData(posestack$pose, bakedquad, f1, f2, f3, f, combinedLight, combinedOverlay);
+            buffer.putBulkData(posestack$pose, bakedquad, f1, f2, f3, f, combinedLight, combinedOverlay, true); // Neo: pass readExistingColor=true
         }
     }
 
@@ -256,5 +_,9 @@
     @Override
     public void onResourceManagerReload(ResourceManager resourceManager) {
         this.itemModelShaper.rebuildCache();
+    }
+
+    public BlockEntityWithoutLevelRenderer getBlockEntityRenderer() {
+         return blockEntityRenderer;
     }
 }
