--- a/net/minecraft/client/renderer/entity/layers/HumanoidArmorLayer.java
+++ b/net/minecraft/client/renderer/entity/layers/HumanoidArmorLayer.java
@@ -60,19 +_,21 @@
         this.renderArmorPiece(poseStack, buffer, livingEntity, EquipmentSlot.HEAD, packedLight, this.getArmorModel(EquipmentSlot.HEAD));
     }
 
-    private void renderArmorPiece(PoseStack poseStack, MultiBufferSource bufferSource, T livingEntity, EquipmentSlot slot, int packedLight, A model) {
+    private void renderArmorPiece(PoseStack poseStack, MultiBufferSource bufferSource, T livingEntity, EquipmentSlot slot, int packedLight, A p_model) {
         ItemStack itemstack = livingEntity.getItemBySlot(slot);
         if (itemstack.getItem() instanceof ArmorItem armoritem) {
             if (armoritem.getEquipmentSlot() == slot) {
-                this.getParentModel().copyPropertiesTo(model);
-                this.setPartVisibility(model, slot);
+                this.getParentModel().copyPropertiesTo(p_model);
+                this.setPartVisibility(p_model, slot);
+                net.minecraft.client.model.Model model = getArmorModelHook(livingEntity, itemstack, slot, p_model);
                 boolean flag = this.usesInnerModel(slot);
                 ArmorMaterial armormaterial = armoritem.getMaterial().value();
                 int i = itemstack.is(ItemTags.DYEABLE) ? FastColor.ARGB32.opaque(DyedItemColor.getOrDefault(itemstack, -6265536)) : -1;
 
                 for (ArmorMaterial.Layer armormaterial$layer : armormaterial.layers()) {
                     int j = armormaterial$layer.dyeable() ? i : -1;
-                    this.renderModel(poseStack, bufferSource, packedLight, model, j, armormaterial$layer.texture(flag));
+                    var texture = net.neoforged.neoforge.client.ClientHooks.getArmorTexture(livingEntity, itemstack, armormaterial$layer, flag, slot);
+                    this.renderModel(poseStack, bufferSource, packedLight, model, j, texture);
                 }
 
                 ArmorTrim armortrim = itemstack.get(DataComponents.TRIM);
@@ -111,21 +_,32 @@
     }
 
     private void renderModel(PoseStack poseStack, MultiBufferSource bufferSource, int packedLight, A model, int dyeColor, ResourceLocation textureLocation) {
-        VertexConsumer vertexconsumer = bufferSource.getBuffer(RenderType.armorCutoutNoCull(textureLocation));
-        model.renderToBuffer(poseStack, vertexconsumer, packedLight, OverlayTexture.NO_OVERLAY, dyeColor);
+        renderModel(poseStack, bufferSource, packedLight, (net.minecraft.client.model.Model) model, dyeColor, textureLocation);
+    }
+    private void renderModel(PoseStack p_289664_, MultiBufferSource p_289689_, int p_289681_, net.minecraft.client.model.Model p_289658_, int p_350798_, ResourceLocation p_324344_) {
+        VertexConsumer vertexconsumer = p_289689_.getBuffer(RenderType.armorCutoutNoCull(p_324344_));
+        p_289658_.renderToBuffer(p_289664_, vertexconsumer, p_289681_, OverlayTexture.NO_OVERLAY, p_350798_);
     }
 
     private void renderTrim(
         Holder<ArmorMaterial> armorMaterial, PoseStack poseStack, MultiBufferSource bufferSource, int packedLight, ArmorTrim trim, A model, boolean innerTexture
     ) {
+        renderTrim(armorMaterial, poseStack, bufferSource, packedLight, trim, (net.minecraft.client.model.Model) model, innerTexture);
+    }
+    private void renderTrim(
+        Holder<ArmorMaterial> p_323506_, PoseStack p_289687_, MultiBufferSource p_289643_, int p_289683_, ArmorTrim p_289692_, net.minecraft.client.model.Model p_289663_, boolean p_289651_
+    ) {
         TextureAtlasSprite textureatlassprite = this.armorTrimAtlas
-            .getSprite(innerTexture ? trim.innerTexture(armorMaterial) : trim.outerTexture(armorMaterial));
-        VertexConsumer vertexconsumer = textureatlassprite.wrap(bufferSource.getBuffer(Sheets.armorTrimsSheet(trim.pattern().value().decal())));
-        model.renderToBuffer(poseStack, vertexconsumer, packedLight, OverlayTexture.NO_OVERLAY);
+            .getSprite(p_289651_ ? p_289692_.innerTexture(p_323506_) : p_289692_.outerTexture(p_323506_));
+        VertexConsumer vertexconsumer = textureatlassprite.wrap(p_289643_.getBuffer(Sheets.armorTrimsSheet(p_289692_.pattern().value().decal())));
+        p_289663_.renderToBuffer(p_289687_, vertexconsumer, p_289683_, OverlayTexture.NO_OVERLAY);
     }
 
     private void renderGlint(PoseStack poseStack, MultiBufferSource bufferSource, int packedLight, A model) {
-        model.renderToBuffer(poseStack, bufferSource.getBuffer(RenderType.armorEntityGlint()), packedLight, OverlayTexture.NO_OVERLAY);
+        renderGlint(poseStack, bufferSource, packedLight, (net.minecraft.client.model.Model) model);
+    }
+    private void renderGlint(PoseStack p_289673_, MultiBufferSource p_289654_, int p_289649_, net.minecraft.client.model.Model p_289659_) {
+        p_289659_.renderToBuffer(p_289673_, p_289654_.getBuffer(RenderType.armorEntityGlint()), p_289649_, OverlayTexture.NO_OVERLAY);
     }
 
     private A getArmorModel(EquipmentSlot slot) {
@@ -134,5 +_,12 @@
 
     private boolean usesInnerModel(EquipmentSlot slot) {
         return slot == EquipmentSlot.LEGS;
+    }
+
+    /**
+     * Hook to allow item-sensitive armor model. for HumanoidArmorLayer.
+     */
+    protected net.minecraft.client.model.Model getArmorModelHook(T entity, ItemStack itemStack, EquipmentSlot slot, A model) {
+        return net.neoforged.neoforge.client.ClientHooks.getArmorModel(entity, itemStack, slot, model);
     }
 }
