--- a/net/minecraft/data/DataGenerator.java
+++ b/net/minecraft/data/DataGenerator.java
@@ -21,6 +_,8 @@
    final Map<String, DataProvider> providersToRun = new LinkedHashMap<>();
    private final WorldVersion version;
    private final boolean alwaysGenerate;
+   private final com.google.common.collect.ListMultimap<String, DataProvider> providers = com.google.common.collect.Multimaps.newListMultimap(new LinkedHashMap<>(), java.util.ArrayList::new);
+   private final com.google.common.collect.ListMultimap<String, DataProvider> providersView = com.google.common.collect.Multimaps.unmodifiableListMultimap(providers);
 
    public DataGenerator(Path p_251724_, WorldVersion p_250554_, boolean p_251323_) {
       this.rootOutputFolder = p_251724_;
@@ -33,11 +_,12 @@
       HashCache hashcache = new HashCache(this.rootOutputFolder, this.allProviderIds, this.version);
       Stopwatch stopwatch = Stopwatch.createStarted();
       Stopwatch stopwatch1 = Stopwatch.createUnstarted();
-      this.providersToRun.forEach((p_254418_, p_253750_) -> {
+      net.neoforged.neoforge.data.loading.DatagenModLoader.forEach(this.providers, (p_254418_, p_253750_) -> {
          if (!this.alwaysGenerate && !hashcache.shouldRunInThisVersion(p_254418_)) {
             LOGGER.debug("Generator {} already run for version {}", p_254418_, this.version.getName());
          } else {
             LOGGER.info("Starting provider: {}", p_254418_);
+            net.neoforged.fml.StartupMessageManager.addModMessage("Generating: " + p_254418_);
             stopwatch1.start();
             hashcache.applyUpdate(hashcache.generateUpdate(p_254418_, p_253750_::run).join());
             stopwatch1.stop();
@@ -58,6 +_,37 @@
       return new DataGenerator.PackGenerator(p_253826_, p_254134_, new PackOutput(path));
    }
 
+   public com.google.common.collect.ListMultimap<String, DataProvider> getProvidersView() {
+       return this.providersView;
+   }
+
+   public PackOutput getPackOutput() {
+      return this.vanillaPackOutput;
+   }
+
+   public PackOutput getPackOutput(String path) {
+      return new PackOutput(rootOutputFolder.resolve(path));
+   }
+
+   public <T extends DataProvider> T addProvider(boolean run, DataProvider.Factory<T> factory) {
+      return addProvider(run, factory.create(this.vanillaPackOutput));
+   }
+
+   public <T extends DataProvider> T addProvider(boolean run, T provider) {
+      String id = java.util.Objects.requireNonNullElse(provider.getId(), provider.getName());
+
+      final boolean added = DataGenerator.this.allProviderIds.add(id);
+      if (provider.getId() != null && !added)
+         throw new IllegalStateException("Duplicate provider: " + id);
+
+      if (run) {
+         DataGenerator.this.providersToRun.put(id, provider);
+         providers.put(id, provider);
+      }
+
+      return provider;
+   }
+
    static {
       Bootstrap.bootStrap();
    }
@@ -75,12 +_,14 @@
 
       public <T extends DataProvider> T addProvider(DataProvider.Factory<T> p_254382_) {
          T t = p_254382_.create(this.output);
-         String s = this.providerPrefix + "/" + t.getName();
-         if (!DataGenerator.this.allProviderIds.add(s)) {
+         String s = this.providerPrefix + "/" + java.util.Objects.requireNonNullElse(t.getId(), t.getName());
+         boolean added = DataGenerator.this.allProviderIds.add(s);
+         if (t.getId() != null && !added) {
             throw new IllegalStateException("Duplicate provider: " + s);
          } else {
             if (this.toRun) {
                DataGenerator.this.providersToRun.put(s, t);
+               DataGenerator.this.providers.put(s, t);
             }
 
             return t;
