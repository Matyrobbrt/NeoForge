--- a/net/minecraft/server/level/ServerPlayerGameMode.java
+++ b/net/minecraft/server/level/ServerPlayerGameMode.java
@@ -68,7 +_,10 @@
     protected void setGameModeForPlayer(GameType p_9274_, @Nullable GameType p_9275_) {
         this.previousGameModeForPlayer = p_9275_;
         this.gameModeForPlayer = p_9274_;
+        // Neo: preserve flying state, removed on tick if Attribute or ability no longer applies
+        boolean wasFlying = this.player.getAbilities().flying;
         p_9274_.updatePlayerAbilities(this.player.getAbilities());
+        this.player.getAbilities().flying = wasFlying || this.player.getAbilities().flying;
     }
 
     public GameType getGameModeForPlayer() {
@@ -224,7 +_,8 @@
 
     public boolean destroyBlock(BlockPos p_9281_) {
         BlockState blockstate1 = this.level.getBlockState(p_9281_);
-        if (!this.player.getMainHandItem().getItem().canAttackBlock(blockstate1, this.level, p_9281_, this.player)) {
+        int exp = net.neoforged.neoforge.common.CommonHooks.onBlockBreakEvent(level, gameModeForPlayer, player, p_9281_);
+        if (exp == -1) {
             return false;
         } else {
             BlockEntity blockentity = this.level.getBlockEntity(p_9281_);
@@ -232,30 +_,44 @@
             if (block instanceof GameMasterBlock && !this.player.canUseGameMasterBlocks()) {
                 this.level.sendBlockUpdated(p_9281_, blockstate1, blockstate1, 3);
                 return false;
+            } else if (player.getMainHandItem().onBlockStartBreak(p_9281_, player)) {
+                return false;
             } else if (this.player.blockActionRestricted(this.level, p_9281_, this.gameModeForPlayer)) {
                 return false;
             } else {
-                BlockState blockstate = block.playerWillDestroy(this.level, p_9281_, blockstate1, this.player);
-                boolean flag1 = this.level.removeBlock(p_9281_, false);
-                if (flag1) {
-                    block.destroy(this.level, p_9281_, blockstate);
-                }
+                BlockState blockstate = blockstate1;
 
                 if (this.isCreative()) {
+                    removeBlock(p_9281_, false);
                     return true;
                 } else {
                     ItemStack itemstack = this.player.getMainHandItem();
                     ItemStack itemstack1 = itemstack.copy();
-                    boolean flag = this.player.hasCorrectToolForDrops(blockstate);
+                    boolean flag1 = blockstate.canHarvestBlock(this.level, p_9281_, this.player); // previously player.hasCorrectToolForDrops(blockstate)
                     itemstack.mineBlock(this.level, blockstate, p_9281_, this.player);
+                    if (itemstack.isEmpty() && !itemstack1.isEmpty())
+                        net.neoforged.neoforge.event.EventHooks.onPlayerDestroyItem(this.player, itemstack1, InteractionHand.MAIN_HAND);
+                    boolean flag = removeBlock(p_9281_, flag1);
+
                     if (flag1 && flag) {
                         block.playerDestroy(this.level, this.player, p_9281_, blockstate, blockentity, itemstack1);
                     }
 
+                    if (flag && exp > 0)
+                        blockstate.getBlock().popExperience(level, p_9281_, exp);
+
                     return true;
                 }
             }
         }
+    }
+
+    private boolean removeBlock(BlockPos p_180235_1_, boolean canHarvest) {
+        BlockState state = this.level.getBlockState(p_180235_1_);
+        boolean removed = state.onDestroyedByPlayer(this.level, p_180235_1_, this.player, canHarvest, this.level.getFluidState(p_180235_1_));
+        if (removed)
+            state.getBlock().destroy(this.level, p_180235_1_, state);
+        return removed;
     }
 
     public InteractionResult useItem(ServerPlayer p_9262_, Level p_9263_, ItemStack p_9264_, InteractionHand p_9265_) {
