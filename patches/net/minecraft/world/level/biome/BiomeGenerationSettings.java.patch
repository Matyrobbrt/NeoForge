--- a/net/minecraft/world/level/biome/BiomeGenerationSettings.java
+++ b/net/minecraft/world/level/biome/BiomeGenerationSettings.java
@@ -50,12 +_,13 @@
                 .apply(p_186655_, BiomeGenerationSettings::new)
     );
     private final Map<GenerationStep.Carving, HolderSet<ConfiguredWorldCarver<?>>> carvers;
+    private final java.util.Set<GenerationStep.Carving> carversView;
     private final List<HolderSet<PlacedFeature>> features;
     private final Supplier<List<ConfiguredFeature<?, ?>>> flowerFeatures;
     private final Supplier<Set<PlacedFeature>> featureSet;
 
-    BiomeGenerationSettings(Map<GenerationStep.Carving, HolderSet<ConfiguredWorldCarver<?>>> carvers, List<HolderSet<PlacedFeature>> features) {
-        this.carvers = carvers;
+    BiomeGenerationSettings(Map<GenerationStep.Carving, HolderSet<ConfiguredWorldCarver<?>>> p_carvers, List<HolderSet<PlacedFeature>> features) {
+        this.carvers = p_carvers;
         this.features = features;
         this.flowerFeatures = Suppliers.memoize(
             () -> features.stream()
@@ -66,10 +_,15 @@
                     .collect(ImmutableList.toImmutableList())
         );
         this.featureSet = Suppliers.memoize(() -> features.stream().flatMap(HolderSet::stream).map(Holder::value).collect(Collectors.toSet()));
+        this.carversView = java.util.Collections.unmodifiableSet(carvers.keySet());
     }
 
     public Iterable<Holder<ConfiguredWorldCarver<?>>> getCarvers(GenerationStep.Carving step) {
         return Objects.requireNonNullElseGet(this.carvers.get(step), List::of);
+    }
+
+    public java.util.Set<GenerationStep.Carving> getCarvingStages() {
+         return this.carversView;
     }
 
     public List<ConfiguredFeature<?, ?>> getFlowerFeatures() {
