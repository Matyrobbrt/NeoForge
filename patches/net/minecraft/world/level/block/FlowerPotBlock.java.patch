--- a/net/minecraft/world/level/block/FlowerPotBlock.java
+++ b/net/minecraft/world/level/block/FlowerPotBlock.java
@@ -35,6 +_,7 @@
     private static final Map<Block, Block> POTTED_BY_CONTENT = Maps.newHashMap();
     public static final float AABB_SIZE = 3.0F;
     protected static final VoxelShape SHAPE = Block.box(5.0, 0.0, 5.0, 11.0, 6.0, 11.0);
+    /** Neo: Field accesses are redirected to {@link #getPotted()} with a coremod. */
     private final Block potted;
 
     @Override
@@ -42,10 +_,31 @@
         return CODEC;
     }
 
+    @Deprecated // Mods should use the constructor below
     public FlowerPotBlock(Block potted, BlockBehaviour.Properties properties) {
+        this(Blocks.FLOWER_POT == null ? null : () -> (FlowerPotBlock) Blocks.FLOWER_POT, () -> potted, properties);
+        if (Blocks.FLOWER_POT != null) {
+            ((FlowerPotBlock)Blocks.FLOWER_POT).addPlant(net.minecraft.core.registries.BuiltInRegistries.BLOCK.getKey(potted), () -> this);
+        }
+    }
+
+    /**
+     * For mod use, eliminates the need to extend this class, and prevents modded
+     * flower pots from altering vanilla behavior.
+     *
+     * @param emptyPot The empty pot for this pot, or null for self.
+     */
+    public FlowerPotBlock(@org.jetbrains.annotations.Nullable java.util.function.Supplier<FlowerPotBlock> emptyPot, java.util.function.Supplier<? extends Block> p_53528_, BlockBehaviour.Properties properties) {
         super(properties);
-        this.potted = potted;
-        POTTED_BY_CONTENT.put(potted, this);
+        this.potted = null; // Unused, redirected by coremod
+        this.flowerDelegate = p_53528_;
+        if (emptyPot == null) {
+            this.fullPots = Maps.newHashMap();
+            this.emptyPot = null;
+        } else {
+            this.fullPots = java.util.Collections.emptyMap();
+            this.emptyPot = emptyPot;
+        }
     }
 
     @Override
@@ -58,7 +_,7 @@
         ItemStack stack, BlockState state, Level level, BlockPos pos, Player player, InteractionHand hand, BlockHitResult hitResult
     ) {
         BlockState blockstate = (stack.getItem() instanceof BlockItem blockitem
-                ? POTTED_BY_CONTENT.getOrDefault(blockitem.getBlock(), Blocks.AIR)
+                ? getEmptyPot().fullPots.getOrDefault(net.minecraft.core.registries.BuiltInRegistries.BLOCK.getKey(blockitem.getBlock()), () -> Blocks.AIR).get()
                 : Blocks.AIR)
             .defaultBlockState();
         if (blockstate.isAir()) {
@@ -84,7 +_,7 @@
                 player.drop(itemstack, false);
             }
 
-            level.setBlock(pos, Blocks.FLOWER_POT.defaultBlockState(), 3);
+            level.setBlock(pos, getEmptyPot().defaultBlockState(), 3);
             level.gameEvent(player, GameEvent.BLOCK_CHANGE, pos);
             return InteractionResult.sidedSuccess(level.isClientSide);
         }
@@ -107,11 +_,32 @@
     }
 
     public Block getPotted() {
-        return this.potted;
+        return flowerDelegate.get();
     }
 
     @Override
     protected boolean isPathfindable(BlockState state, PathComputationType pathComputationType) {
         return false;
     }
+
+    //Forge Start
+    private final Map<net.minecraft.resources.ResourceLocation, java.util.function.Supplier<? extends Block>> fullPots;
+    private final java.util.function.Supplier<FlowerPotBlock> emptyPot;
+    private final java.util.function.Supplier<? extends Block> flowerDelegate;
+
+    public FlowerPotBlock getEmptyPot() {
+         return emptyPot == null ? this : emptyPot.get();
+    }
+
+    public void addPlant(net.minecraft.resources.ResourceLocation flower, java.util.function.Supplier<? extends Block> fullPot) {
+         if (getEmptyPot() != this) {
+              throw new IllegalArgumentException("Cannot add plant to non-empty pot: " + this);
+         }
+         fullPots.put(flower, fullPot);
+    }
+
+    public Map<net.minecraft.resources.ResourceLocation, java.util.function.Supplier<? extends Block>> getFullPotsView() {
+        return java.util.Collections.unmodifiableMap(fullPots);
+    }
+    //Forge End
 }
