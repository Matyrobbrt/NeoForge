--- a/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
+++ b/net/minecraft/world/level/entity/PersistentEntitySectionManager.java
@@ -71,25 +_,34 @@
         return this.addEntity(entity, false);
     }
 
-    private boolean addEntity(T entity, boolean worldGenSpawned) {
-        if (!this.addEntityUuid(entity)) {
+    public boolean addNewEntityWithoutEvent(T entity) {
+        return this.addEntityWithoutEvent(entity, false);
+    }
+
+    private boolean addEntity(T p_entity, boolean worldGenSpawned) {
+        if (p_entity instanceof Entity entity && net.neoforged.neoforge.common.NeoForge.EVENT_BUS.post(new net.neoforged.neoforge.event.entity.EntityJoinLevelEvent(entity, entity.level(), worldGenSpawned)).isCanceled()) return false;
+        return addEntityWithoutEvent(p_entity, worldGenSpawned);
+    }
+
+    private boolean addEntityWithoutEvent(T p_157539_, boolean p_157540_) {
+        if (!this.addEntityUuid(p_157539_)) {
             return false;
         } else {
-            long i = SectionPos.asLong(entity.blockPosition());
+            long i = SectionPos.asLong(p_157539_.blockPosition());
             EntitySection<T> entitysection = this.sectionStorage.getOrCreateSection(i);
-            entitysection.add(entity);
-            entity.setLevelCallback(new PersistentEntitySectionManager.Callback(entity, i, entitysection));
-            if (!worldGenSpawned) {
-                this.callbacks.onCreated(entity);
+            entitysection.add(p_157539_);
+            p_157539_.setLevelCallback(new PersistentEntitySectionManager.Callback(p_157539_, i, entitysection));
+            if (!p_157540_) {
+                this.callbacks.onCreated(p_157539_);
             }
 
-            Visibility visibility = getEffectiveStatus(entity, entitysection.getStatus());
+            Visibility visibility = getEffectiveStatus(p_157539_, entitysection.getStatus());
             if (visibility.isAccessible()) {
-                this.startTracking(entity);
+                this.startTracking(p_157539_);
             }
 
             if (visibility.isTicking()) {
-                this.startTicking(entity);
+                this.startTicking(p_157539_);
             }
 
             return true;
@@ -101,11 +_,17 @@
     }
 
     public void addLegacyChunkEntities(Stream<T> entities) {
-        entities.forEach(p_157607_ -> this.addEntity((T)p_157607_, true));
+        entities.forEach(p_157607_ -> {
+            this.addEntity(p_157607_, true);
+            if (p_157607_ instanceof Entity entity) entity.onAddedToWorld();
+        });
     }
 
     public void addWorldGenChunkEntities(Stream<T> entities) {
-        entities.forEach(p_157605_ -> this.addEntity((T)p_157605_, false));
+        entities.forEach(p_157605_ -> {
+            this.addEntity(p_157605_, false);
+            if (p_157605_ instanceof Entity entity) entity.onAddedToWorld();
+        });
     }
 
     void startTicking(T entity) {
@@ -228,7 +_,10 @@
     private void processPendingLoads() {
         ChunkEntities<T> chunkentities;
         while ((chunkentities = this.loadingInbox.poll()) != null) {
-            chunkentities.getEntities().forEach(p_157593_ -> this.addEntity((T)p_157593_, true));
+            chunkentities.getEntities().forEach(p_157593_ -> {
+                this.addEntity(p_157593_, true);
+                if (p_157593_ instanceof Entity entity) entity.onAddedToWorld();
+            });
             this.chunkLoadStatuses.put(chunkentities.getPos().toLong(), PersistentEntitySectionManager.ChunkLoadStatus.LOADED);
         }
     }
@@ -367,11 +_,13 @@
 
     class Callback implements EntityInLevelCallback {
         private final T entity;
+        private final Entity realEntity;
         private long currentSectionKey;
         private EntitySection<T> currentSection;
 
         Callback(T entity, long currentSectionKey, EntitySection<T> currentSection) {
             this.entity = entity;
+            this.realEntity = entity instanceof Entity ? (Entity) entity : null;
             this.currentSectionKey = currentSectionKey;
             this.currentSection = currentSection;
         }
@@ -390,9 +_,11 @@
                 PersistentEntitySectionManager.this.removeSectionIfEmpty(this.currentSectionKey, this.currentSection);
                 EntitySection<T> entitysection = PersistentEntitySectionManager.this.sectionStorage.getOrCreateSection(i);
                 entitysection.add(this.entity);
+                long oldSectionKey = currentSectionKey;
                 this.currentSection = entitysection;
                 this.currentSectionKey = i;
                 this.updateStatus(visibility, entitysection.getStatus());
+                if (this.realEntity != null) net.neoforged.neoforge.common.CommonHooks.onEntityEnterSection(this.realEntity, oldSectionKey, i);
             }
         }
 
