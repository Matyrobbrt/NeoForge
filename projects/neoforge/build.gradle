import groovy.transform.CompileStatic
import groovyjarjarasm.asm.ClassReader
import groovyjarjarasm.asm.Opcodes
import groovyjarjarasm.asm.tree.ClassNode

import java.lang.reflect.Modifier
import java.nio.file.FileSystems
import java.nio.file.Files
import java.util.function.Predicate

plugins {
    id 'java-library'
    id 'maven-publish'
}

dynamicProject {
    runtime("${project.minecraft_version}-${project.neoform_version}",
            rootProject.layout.projectDirectory.dir('patches'),
            rootProject.layout.projectDirectory.dir('rejects'))
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(project.java_version))
    }
}

minecraft {
    accessTransformers {
        file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg')
    }
}

sourceSets {
    main {
        java {
            srcDirs rootProject.file('src/main/java')
        }
        resources {
            srcDirs rootProject.file('src/main/resources'), rootProject.file('src/generated/resources')
        }
    }
}

dependencies {
    pluginLayerLibrary "net.neoforged.fancymodloader:core:${project.fancy_mod_loader_version}"
    pluginLayerLibrary "net.neoforged.fancymodloader:language-java:${project.fancy_mod_loader_version}"
    pluginLayerLibrary "net.neoforged.fancymodloader:language-lowcode:${project.fancy_mod_loader_version}"
    pluginLayerLibrary "net.neoforged.fancymodloader:language-minecraft:${project.fancy_mod_loader_version}"

    gameLayerLibrary ("net.neoforged.fancymodloader:events:${project.fancy_mod_loader_version}") {
        exclude group: 'org.slf4j'
    }

    runtimeOnly "cpw.mods:bootstraplauncher:${project.bootstraplauncher_version}"

    moduleOnly "cpw.mods:securejarhandler:${project.securejarhandler_version}"
    moduleOnly "org.ow2.asm:asm:${project.asm_version}"
    moduleOnly "org.ow2.asm:asm-commons:${project.asm_version}"
    moduleOnly "org.ow2.asm:asm-tree:${project.asm_version}"
    moduleOnly "org.ow2.asm:asm-util:${project.asm_version}"
    moduleOnly "org.ow2.asm:asm-analysis:${project.asm_version}"
    moduleOnly "cpw.mods:bootstraplauncher:${project.bootstraplauncher_version}"
    moduleOnly "net.neoforged:JarJarFileSystems:${project.jarjar_version}"

    installer ("net.neoforged.fancymodloader:loader:${project.fancy_mod_loader_version}") {
        exclude group: 'org.slf4j'
    }
    installer ("net.neoforged.fancymodloader:earlydisplay:${project.fancy_mod_loader_version}") {
        exclude group: 'org.lwjgl'
        exclude group: 'org.slf4j'
    }
    installer "cpw.mods:securejarhandler:${project.securejarhandler_version}"
    installer "org.ow2.asm:asm:${project.asm_version}"
    installer "org.ow2.asm:asm-commons:${project.asm_version}"
    installer "org.ow2.asm:asm-tree:${project.asm_version}"
    installer "org.ow2.asm:asm-util:${project.asm_version}"
    installer "org.ow2.asm:asm-analysis:${project.asm_version}"
    installer "net.neoforged:accesstransformers:${project.accesstransformers_version}"
    installer "net.neoforged:bus:${project.eventbus_version}"
    installer "net.neoforged:neoforgespi:${project.spi_version}"
    installer "net.neoforged:coremods:${project.coremods_version}"
    installer "cpw.mods:modlauncher:${project.modlauncher_version}"
    installer "net.minecraftforge:unsafe:${project.unsafe_version}"
    installer "net.neoforged:mergetool:${project.mergetool_version}:api"
    installer "com.electronwill.night-config:core:${project.nightconfig_version}"
    installer "com.electronwill.night-config:toml:${project.nightconfig_version}"
    installer "org.apache.maven:maven-artifact:${project.apache_maven_artifact_version}"
    installer "net.jodah:typetools:${project.typetools_version}"
    installer "net.minecrell:terminalconsoleappender:${project.terminalconsoleappender_version}"
    installer "org.spongepowered:mixin:${project.mixin_version}"
    installer "org.openjdk.nashorn:nashorn-core:${project.nashorn_core_version}"
    installer ("net.neoforged:JarJarSelector:${project.jarjar_version}") {
        exclude group: 'org.slf4j'
    }
    installer ("net.neoforged:JarJarMetadata:${project.jarjar_version}") {
        exclude group: 'org.slf4j'
    }

    compileOnly "org.jetbrains:annotations:${project.jetbrains_annotations_version}"
}

runTypes {
    client {
        singleInstance false
        client true

        arguments.addAll '--fml.neoForgeVersion', project.version
        arguments.addAll '--fml.fmlVersion', project.fancy_mod_loader_version
        arguments.addAll '--fml.mcVersion', project.minecraft_version
        arguments.addAll '--fml.neoFormVersion', project.neoform_version
    }

    server {
        server true

        arguments.addAll '--fml.neoForgeVersion', project.version
        arguments.addAll '--fml.fmlVersion', project.fancy_mod_loader_version
        arguments.addAll '--fml.mcVersion', project.minecraft_version
        arguments.addAll '--fml.neoFormVersion', project.neoform_version
    }

    gameTestServer {
        from project.runTypes.server

        gameTest true
    }

    gameTestClient {
        from project.runTypes.client

        gameTest true
    }

    data {
        dataGenerator true

        // Don't set modid here so we can reuse this runType for test datagen
        arguments.addAll '--fml.neoForgeVersion', project.version
        arguments.addAll '--fml.fmlVersion', project.fancy_mod_loader_version
        arguments.addAll '--fml.mcVersion', project.minecraft_version
        arguments.addAll '--fml.neoFormVersion', project.neoform_version
    }
}

runs {
    client { }
    server { }
    gameTestServer { }
    gameTestClient { }
    "Data" {
        configure project.runTypes.data

        programArguments.addAll '--mod', 'neoforge'

        modSources.add project.sourceSets.main

        idea {
            primarySourceSet project.sourceSets.main
        }
    }
}

runs.configureEach { it ->
    final File gameDir = project.file("run/${it.name}") as File
    gameDir.mkdirs();

    it.workingDirectory.set gameDir
    it.programArguments.addAll '--gameDir', "\"${gameDir.absolutePath}\""
}

launcherProfile {
    arguments {
        game '--fml.neoForgeVersion'
        game project.version
        game '--fml.fmlVersion'
        game project.fancy_mod_loader_version
        game '--fml.mcVersion'
        game project.minecraft_version
        game '--fml.neoFormVersion'
        game project.neoform_version
    }
}

userdevProfile {
    runTypes.configureEach {
        argument '--fml.neoForgeVersion'
        argument project.version
        argument '--fml.fmlVersion'
        argument project.fancy_mod_loader_version
        argument '--fml.mcVersion'
        argument project.minecraft_version
        argument '--fml.neoFormVersion'
        argument project.neoform_version
    }
}

tasks.withType(Javadoc.class).configureEach {
    options.tags = [
            'apiNote:a:<em>API Note:</em>',
            'implSpec:a:<em>Implementation Requirements:</em>',
            'implNote:a:<em>Implementation Note:</em>'
    ]
    options.addStringOption('Xdoclint:all,-missing', '-public')
}

tasks.withType(GenerateModuleMetadata).configureEach { enabled = false }

configurations {
    forValidation {
        canBeConsumed = true
        canBeResolved = false
        attributes {
            attribute(Category.CATEGORY_ATTRIBUTE, objects.named(Category, Category.LIBRARY))
            attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
            attribute(Bundling.BUNDLING_ATTRIBUTE, objects.named(Bundling, Bundling.EXTERNAL))
            attribute(LibraryElements.LIBRARY_ELEMENTS_ATTRIBUTE, objects.named(LibraryElements, LibraryElements.JAR))
        }

        extendsFrom api, runtimeOnly
    }
}

artifacts {
    forValidation(jar.archiveFile) {
        builtBy(jar)
    }
}

tasks.register('generateATs', GenerateATsTask.class).configure {
    getMCJar().set(project(':base').tasks.named('jar', Jar).flatMap { it.archiveFile })
    group(
            'DataProvider names',
            isChildrenOf('net/minecraft/data/DataProvider'),
            methods('public-f', 'getName()Ljava/lang/String;')
    )
    group(
            'Recipe provider utilities',
            isNamed('net/minecraft/data/recipes/RecipeProvider'),
            makeMethodsPublic { Modifier.isStatic(it) && Modifier.isProtected(it) }
    )
    group(
            'Render states',
            isNamed('net/minecraft/client/renderer/RenderStateShard'),
            makeFieldsPublic { Modifier.isProtected(it) && Modifier.isStatic(it) }
    )
}

publishing {
    publications.create('NeoForge', MavenPublication) {
        groupId = project.group
        artifactId = project.name
        version = project.version

        from components.java

        artifacts = []

        afterEvaluate {
            artifact (signUniversalJar.output) {
                classifier 'universal'
            }
            artifact (signInstallerJar.output) {
                classifier 'installer'
            }
            artifact (userdevJar) {
                classifier 'userdev'
            }
            artifact (sourcesJar) {
                classifier 'sources'
            }
        }

        changelog.publish(it)

        versionMapping {
            usage('java-api') {
                fromResolutionOf('runtimeClasspath')
            }
            usage('java-runtime') {
                fromResolutionResult()
            }
        }

        pom {
            name = project.name
            description = 'Modifactions to Minecraft to enable mod developers.'
            url = 'https://github.com/NeoForged/NeoForge'

            scm {
                url = 'https://github.com/NeoForged/NeoForge'
                connection = 'scm:git:git://github.com/NeoForged/NeoForge.git'
                developerConnection = 'scm:git:git@github.com:NeoForged/NeoForge.git'
            }

            issueManagement {
                system = 'github'
                url = 'https://github.com/NeoForged/NeoForge/issues'
            }

            licenses {
                license {
                    name = 'LGPL 2.1'
                    url = 'https://github.com/NeoForged/NeoForge/blob/1.13-pre/LICENSE.txt'
                    distribution = 'repo'
                }
            }
        }
    }
    repositories {
        maven rootProject.gradleutils.getPublishingMaven()
    }
}

class Group {
    private final String name
    private final ClassPredicate predicate
    private final ATProvider provider

    Group(String name, ClassPredicate predicate, ATProvider prov) {
        this.name = name
        this.predicate = predicate
        this.provider = prov
    }
}

interface ClassPredicate {
    boolean test(ClassNode node, List<String> parents)
}

interface ATProvider {
    default Collection<WithAccessModifier> provideMethods(ClassNode node) {
        return []
    }

    default Collection<WithAccessModifier> provideFields(ClassNode node) {
        return []
    }
}

class WithAccessModifier {
    final String modifier, value

    WithAccessModifier(String modifier, String value) {
        this.modifier = modifier
        this.value = value
    }
}

static ATProvider methods(String modifier, String... names) {
    return new ATProvider() {
        @Override
        Collection<WithAccessModifier> provideMethods(ClassNode node) {
            return node.methods.findAll {
                (it.name + it.desc) in names
            }.collect {
                new WithAccessModifier(modifier, it.name + it.desc)
            }
        }
    }
}

static ATProvider makeMethodsPublic(Predicate<Integer> accessLevel) {
    return new ATProvider() {
        @Override
        Collection<WithAccessModifier> provideMethods(ClassNode node) {
            return node.methods.findAll {
                accessLevel.test(it.access)
            }.collect {
                new WithAccessModifier('public', it.name + it.desc)
            }
        }
    }
}

static ATProvider makeFieldsPublic(Predicate<Integer> accessLevel) {
    return new ATProvider() {
        @Override
        Collection<WithAccessModifier> provideFields(ClassNode node) {
            return node.fields.findAll {
                accessLevel.test(it.access)
            }.collect {
                new WithAccessModifier('public', it.name)
            }
        }
    }
}

static ClassPredicate isChildrenOf(String parent) {
    return (ClassNode node, List<String> parents) -> parents.contains(parent)
}

static ClassPredicate isNamed(String clazz) {
    return (ClassNode node, List<String> parents) -> node.name == clazz
}

abstract class GenerateATsTask extends DefaultTask {
    @InputFile
    abstract RegularFileProperty getMCJar()

    public final List<Group> groups = []

    void group(String name, ClassPredicate predicate, ATProvider provider) {
        groups.add(new Group(name, predicate, provider))
    }

    @TaskAction
    void run() {
        final Map<String, ClassNode> classes = [:]
        FileSystems.newFileSystem((getMCJar().get().asFile as File).toPath(), (ClassLoader) null).withCloseable {
            Files.walk(it.getPath('net/minecraft')).withCloseable { dirs ->
                dirs.forEach { file ->
                    if (file.toString().endsWith('.class')) {
                        final cn = new ClassNode(Opcodes.ASM9)
                        new ClassReader(Files.readAllBytes(file)).accept(cn, ClassReader.SKIP_CODE)
                        classes.put(cn.name, cn)
                    }
                }
            }
        }

        final Map<String, List<String>> allParents = [:]
        classes.forEach { name, cls ->
            allParents[name] = getParents(classes, cls)
        }

        final atFile = new StringBuilder()

        groups.each { group ->
            atFile.append('# ' + group.name)

            classes.values().each { clz ->
                if (group.predicate.test(clz, allParents[clz.name])) {
                    group.provider.provideMethods(clz).each {
                        atFile.append("\n${it.modifier} ${clz.name.replace('/', '.')} ${it.value}")
                    }
                    group.provider.provideFields(clz).each {
                        atFile.append("\n${it.modifier} ${clz.name.replace('/', '.')} ${it.value}")
                    }
                }
            }

            atFile.append('\n\n')
        }

        println(atFile.toString())
    }

    List<String> getParents(Map<String, ClassNode> classes, ClassNode clazz) {
        final direct = [] as List<String>
        direct.add(clazz.superName)
        direct.addAll(clazz.interfaces)

        final fromChildren = [] as List<String>
        direct.forEach {
            if (classes[it]) {
                fromChildren.addAll(getParents(classes, classes[it]))
            }
        }

        return direct + fromChildren
    }
}